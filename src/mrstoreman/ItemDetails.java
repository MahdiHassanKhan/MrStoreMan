/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrstoreman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mahdi
 */
public class ItemDetails extends javax.swing.JFrame {

    /**
     * Creates new form ItemDetails
     */
    public ItemDetails() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBFID = new javax.swing.JButton();
        jButtonFetchinID = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelIDClose = new javax.swing.JLabel();
        jLabelIDMin = new javax.swing.JLabel();
        ItemDetailsSearchField = new javax.swing.JTextField();
        jComboBoxIDSettings = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemDetails = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(17, 32, 65));

        jButtonBFID.setBackground(new java.awt.Color(243, 67, 73));
        jButtonBFID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBFID.setForeground(new java.awt.Color(240, 240, 240));
        jButtonBFID.setText("<-");
        jButtonBFID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBFID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBFIDMouseClicked(evt);
            }
        });
        jButtonBFID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBFIDActionPerformed(evt);
            }
        });

        jButtonFetchinID.setBackground(new java.awt.Color(243, 67, 73));
        jButtonFetchinID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonFetchinID.setForeground(new java.awt.Color(240, 240, 240));
        jButtonFetchinID.setText("Fetch");
        jButtonFetchinID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFetchinID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFetchinIDActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Item Details");

        jLabelIDClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelIDClose.setForeground(new java.awt.Color(240, 240, 240));
        jLabelIDClose.setText("X");
        jLabelIDClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelIDClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelIDCloseMouseClicked(evt);
            }
        });

        jLabelIDMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelIDMin.setForeground(new java.awt.Color(240, 240, 240));
        jLabelIDMin.setText("-");
        jLabelIDMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelIDMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelIDMinMouseClicked(evt);
            }
        });

        ItemDetailsSearchField.setBackground(new java.awt.Color(234, 67, 73));
        ItemDetailsSearchField.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemDetailsSearchField.setForeground(new java.awt.Color(240, 240, 240));
        ItemDetailsSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemDetailsSearchFieldActionPerformed(evt);
            }
        });

        jComboBoxIDSettings.setBackground(new java.awt.Color(234, 67, 73));
        jComboBoxIDSettings.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxIDSettings.setForeground(new java.awt.Color(240, 240, 240));
        jComboBoxIDSettings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Available", "Expired", "Out of stock" }));
        jComboBoxIDSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxIDSettingsMouseClicked(evt);
            }
        });
        jComboBoxIDSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxIDSettingsActionPerformed(evt);
            }
        });

        ItemDetails.setBackground(new java.awt.Color(243, 67, 73));
        ItemDetails.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ItemDetails.setForeground(new java.awt.Color(240, 240, 240));
        ItemDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Type/Description", "Purchase Price", "Selling Price", "Manufacture Date", "Expiration Date", "Validation Left", "Weight(gm)", "Quantity", "Status"
            }
        ));
        ItemDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemDetails);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ItemDetailsSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFetchinID, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonBFID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(122, 122, 122)
                        .addComponent(jComboBoxIDSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jLabelIDMin)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelIDClose)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxIDSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelIDMin)
                        .addComponent(jLabelIDClose)
                        .addComponent(jButtonBFID)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonFetchinID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ItemDetailsSearchField))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBFIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBFIDMouseClicked
        // TODO add your handling code here:
        ItemInfo ii = new ItemInfo();
        ii.setVisible(true);
        ii.pack();
        ii.setLocationRelativeTo(null);
        ii.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButtonBFIDMouseClicked

    private void jButtonBFIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBFIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBFIDActionPerformed

    private void jButtonFetchinIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFetchinIDActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            
            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);
            
            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);


            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);
            
            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/
            
            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);
            
            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
                               "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";
           
            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);
            
            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            ItemDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }
        
        if(ItemDetailsSearchField.getText().length()==0)
        {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection2 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
                ItemDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
                Statement st2 = connection2.createStatement();
                if(jComboBoxIDSettings.getSelectedIndex()==0)
                {
                    String sql2 = "select * from Item";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }


                    connection2.close();
                }

                if(jComboBoxIDSettings.getSelectedIndex()==1)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Available' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxIDSettings.getSelectedIndex()==2)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Expired' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }
                
                if(jComboBoxIDSettings.getSelectedIndex()==3)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Out of stock' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }

            }

            catch (Exception e) {
                //e.printStackTrace();
                System.out.println(e.getMessage());
            }
        }

        else
        {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection2 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
                ItemDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
                Statement st2 = connection2.createStatement();

                if(jComboBoxIDSettings.getSelectedIndex()==0)
                {
                    String sql2 = "select * from Item WHERE ItemId LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemBrand LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemDescription LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemPurchasePrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemSellingPrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemManufactureDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemExpirationDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemValidationLeft LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemWeight LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemQuantity LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxIDSettings.getSelectedIndex()==1)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Available' AND ItemId LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemBrand LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemDescription LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemPurchasePrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemSellingPrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemManufactureDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemExpirationDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemValidationLeft LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemWeight LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemQuantity LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemStatus LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxIDSettings.getSelectedIndex()==2)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Expired' AND ItemId LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemBrand LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemDescription LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemPurchasePrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemSellingPrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemManufactureDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemExpirationDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemValidationLeft LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemWeight LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemQuantity LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemStatus LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }
                
                if(jComboBoxIDSettings.getSelectedIndex()==3)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Out of stock' AND ItemId LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemBrand LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemDescription LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemPurchasePrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemSellingPrice LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemManufactureDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemExpirationDate LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemValidationLeft LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemWeight LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemQuantity LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemStatus LIKE '%"+ItemDetailsSearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                    String ItemId = String.valueOf(rs2.getInt("ItemId"));
                    String ItemBrand = rs2.getString("ItemBrand");
                    String ItemDescription = rs2.getString("ItemDescription");
                    String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                    String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                    String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                    String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                    String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                    String ItemWeight = rs2.getString("ItemWeight");
                    String ItemQuantity = rs2.getString("ItemQuantity");
                    String ItemStatus = rs2.getString("ItemStatus");
                
                    String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                    DefaultTableModel items = (DefaultTableModel)ItemDetails.getModel();
                    items.addRow(ItemData);
                    }

                    connection2.close();
                }

            }

            catch (Exception e) {
                //e.printStackTrace();
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonFetchinIDActionPerformed

    private void jLabelIDCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIDCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelIDCloseMouseClicked

    private void jLabelIDMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIDMinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelIDMinMouseClicked

    private void ItemDetailsSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemDetailsSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemDetailsSearchFieldActionPerformed

    private void jComboBoxIDSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxIDSettingsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxIDSettingsMouseClicked

    private void jComboBoxIDSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxIDSettingsActionPerformed
        /*int settings = jComboBoxEDSettings.getSelectedIndex();
        if(settings == 1)
        {
            Requests r2 = new Requests();
            r2.setVisible(true);
            r2.pack();
            r2.setLocationRelativeTo(null);
            r2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
        else if(settings == 2)
        {
            Choose chs3 = new Choose();
            chs3.setVisible(true);
            chs3.pack();
            chs3.setLocationRelativeTo(null);
            chs3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }*/
    }//GEN-LAST:event_jComboBoxIDSettingsActionPerformed

    private void ItemDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemDetailsMouseClicked
        /*int row = AIDetails.getSelectedRow();
        String selection = AIDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));
                ItemPurchasePrice.setText(rs3.getString("ItemPurchasePrice"));
                ItemSellingPrice.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                pst.setString(5, manufacturedate);
                ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                ItemWeight.setText(rs3.getString("ItemWeight"));
                ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }*/
    }//GEN-LAST:event_ItemDetailsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ItemDetails;
    private javax.swing.JTextField ItemDetailsSearchField;
    private javax.swing.JButton jButtonBFID;
    private javax.swing.JButton jButtonFetchinID;
    private javax.swing.JComboBox<String> jComboBoxIDSettings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelIDClose;
    private javax.swing.JLabel jLabelIDMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
