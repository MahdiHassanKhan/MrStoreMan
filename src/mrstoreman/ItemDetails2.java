/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrstoreman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mahdi
 */
public class ItemDetails2 extends javax.swing.JFrame {

    /**
     * Creates new form ItemDetails2
     */
    public ItemDetails2() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBFID2 = new javax.swing.JButton();
        jButtonFetchinID2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelID2Close = new javax.swing.JLabel();
        jLabelID2Min = new javax.swing.JLabel();
        ItemDetails2SearchField = new javax.swing.JTextField();
        jComboBoxID2Settings = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemDetails2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(17, 32, 65));

        jButtonBFID2.setBackground(new java.awt.Color(243, 67, 73));
        jButtonBFID2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBFID2.setForeground(new java.awt.Color(240, 240, 240));
        jButtonBFID2.setText("<-");
        jButtonBFID2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBFID2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBFID2MouseClicked(evt);
            }
        });
        jButtonBFID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBFID2ActionPerformed(evt);
            }
        });

        jButtonFetchinID2.setBackground(new java.awt.Color(243, 67, 73));
        jButtonFetchinID2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonFetchinID2.setForeground(new java.awt.Color(240, 240, 240));
        jButtonFetchinID2.setText("Fetch");
        jButtonFetchinID2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFetchinID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFetchinID2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Item Details");

        jLabelID2Close.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelID2Close.setForeground(new java.awt.Color(240, 240, 240));
        jLabelID2Close.setText("X");
        jLabelID2Close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelID2Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelID2CloseMouseClicked(evt);
            }
        });

        jLabelID2Min.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelID2Min.setForeground(new java.awt.Color(240, 240, 240));
        jLabelID2Min.setText("-");
        jLabelID2Min.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelID2Min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelID2MinMouseClicked(evt);
            }
        });

        ItemDetails2SearchField.setBackground(new java.awt.Color(234, 67, 73));
        ItemDetails2SearchField.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemDetails2SearchField.setForeground(new java.awt.Color(240, 240, 240));
        ItemDetails2SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemDetails2SearchFieldActionPerformed(evt);
            }
        });

        jComboBoxID2Settings.setBackground(new java.awt.Color(234, 67, 73));
        jComboBoxID2Settings.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxID2Settings.setForeground(new java.awt.Color(240, 240, 240));
        jComboBoxID2Settings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Available", "Expired", "Out of stock" }));
        jComboBoxID2Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxID2SettingsMouseClicked(evt);
            }
        });
        jComboBoxID2Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxID2SettingsActionPerformed(evt);
            }
        });

        ItemDetails2.setBackground(new java.awt.Color(243, 67, 73));
        ItemDetails2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ItemDetails2.setForeground(new java.awt.Color(240, 240, 240));
        ItemDetails2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Type/Description", "Purchase Price", "Selling Price", "Manufacture Date", "Expiration Date", "Validation Left", "Weight(gm)", "Quantity", "Status"
            }
        ));
        ItemDetails2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemDetails2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemDetails2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ItemDetails2SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFetchinID2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonBFID2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 271, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(122, 122, 122)
                        .addComponent(jComboBoxID2Settings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jLabelID2Min)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelID2Close)
                        .addGap(31, 31, 31))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxID2Settings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelID2Min)
                        .addComponent(jLabelID2Close)
                        .addComponent(jButtonBFID2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonFetchinID2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ItemDetails2SearchField))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBFID2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBFID2MouseClicked
        // TODO add your handling code here:
        ItemInfo2 ii2 = new ItemInfo2();
        ii2.setVisible(true);
        ii2.pack();
        ii2.setLocationRelativeTo(null);
        ii2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButtonBFID2MouseClicked

    private void jButtonBFID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBFID2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBFID2ActionPerformed

    private void jButtonFetchinID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFetchinID2ActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
            "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
            "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
            "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            ItemDetails2.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }

        if(ItemDetails2SearchField.getText().length()==0)
        {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection2 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
                ItemDetails2.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
                Statement st2 = connection2.createStatement();
                if(jComboBoxID2Settings.getSelectedIndex()==0)
                {
                    String sql2 = "select * from Item";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==1)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Available' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==2)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Expired' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==3)
                {
                    String sql2 = "select * from Item WHERE ItemStatus = 'Out of stock' ";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

            }

            catch (Exception e) {
                //e.printStackTrace();
                System.out.println(e.getMessage());
            }
        }

        else
        {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection2 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
                ItemDetails2.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
                Statement st2 = connection2.createStatement();

                if(jComboBoxID2Settings.getSelectedIndex()==0)
                {
                    String sql2 = "select * from Item WHERE ItemId LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemBrand LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemDescription LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemPurchasePrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemSellingPrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemManufactureDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemExpirationDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemValidationLeft LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemWeight LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemQuantity LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==1)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Available' AND ItemId LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemBrand LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemDescription LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemPurchasePrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemSellingPrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemManufactureDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemExpirationDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemValidationLeft LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemWeight LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemQuantity LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Available' AND ItemStatus LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==2)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Expired' AND ItemId LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemBrand LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemDescription LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemPurchasePrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemSellingPrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemManufactureDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemExpirationDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemValidationLeft LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemWeight LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemQuantity LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Expired' AND ItemStatus LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

                if(jComboBoxID2Settings.getSelectedIndex()==3)
                {
                    String sql2 = "select * from Item WHERE ItemStatus='Out of stock' AND ItemId LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemBrand LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemDescription LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemPurchasePrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemSellingPrice LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemManufactureDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemExpirationDate LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemValidationLeft LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemWeight LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemQuantity LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    sql2 += "UNION select * from Item WHERE ItemStatus='Out of stock' AND ItemStatus LIKE '%"+ItemDetails2SearchField.getText()+"%'";
                    ResultSet rs2 = st2.executeQuery(sql2);
                    while(rs2.next()){
                        String ItemId = String.valueOf(rs2.getInt("ItemId"));
                        String ItemBrand = rs2.getString("ItemBrand");
                        String ItemDescription = rs2.getString("ItemDescription");
                        String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                        String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                        String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                        String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                        String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                        String ItemWeight = rs2.getString("ItemWeight");
                        String ItemQuantity = rs2.getString("ItemQuantity");
                        String ItemStatus = rs2.getString("ItemStatus");

                        String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                        DefaultTableModel items = (DefaultTableModel)ItemDetails2.getModel();
                        items.addRow(ItemData);
                    }

                    connection2.close();
                }

            }

            catch (Exception e) {
                //e.printStackTrace();
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonFetchinID2ActionPerformed

    private void jLabelID2CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelID2CloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelID2CloseMouseClicked

    private void jLabelID2MinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelID2MinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelID2MinMouseClicked

    private void ItemDetails2SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemDetails2SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemDetails2SearchFieldActionPerformed

    private void jComboBoxID2SettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxID2SettingsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxID2SettingsMouseClicked

    private void jComboBoxID2SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxID2SettingsActionPerformed
        /*int settings = jComboBoxEDSettings.getSelectedIndex();
        if(settings == 1)
        {
            Requests r2 = new Requests();
            r2.setVisible(true);
            r2.pack();
            r2.setLocationRelativeTo(null);
            r2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
        else if(settings == 2)
        {
            Choose chs3 = new Choose();
            chs3.setVisible(true);
            chs3.pack();
            chs3.setLocationRelativeTo(null);
            chs3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }*/
    }//GEN-LAST:event_jComboBoxID2SettingsActionPerformed

    private void ItemDetails2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemDetails2MouseClicked
        /*int row = AIDetails.getSelectedRow();
        String selection = AIDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));
                ItemPurchasePrice.setText(rs3.getString("ItemPurchasePrice"));
                ItemSellingPrice.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                pst.setString(5, manufacturedate);
                ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                ItemWeight.setText(rs3.getString("ItemWeight"));
                ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }*/
    }//GEN-LAST:event_ItemDetails2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemDetails2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemDetails2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemDetails2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemDetails2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemDetails2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ItemDetails2;
    private javax.swing.JTextField ItemDetails2SearchField;
    private javax.swing.JButton jButtonBFID2;
    private javax.swing.JButton jButtonFetchinID2;
    private javax.swing.JComboBox<String> jComboBoxID2Settings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelID2Close;
    private javax.swing.JLabel jLabelID2Min;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
