/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrstoreman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static mrstoreman.BuyItems.customerid3;
import static mrstoreman.BuyItems.customername3;

/**
 *
 * @author Mahdi
 */
public class ViewEditCart3 extends javax.swing.JFrame {

    /**
     * Creates new form ViewEditCart3
     */
    static String customerid4;
    static String customername4;
    
    String itemsid3="";
    String itemsbrand3="";
    String itemsdescription3="";
    String itemssellingprice3="";
    String itemsquantity3="";
    float totalprice3=0f;
    
    public ViewEditCart3() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public ViewEditCart3(String customerid3, String customername3) {
        initComponents();
        this.setLocationRelativeTo(null);
        
        jLabelCustomerID3.setText(customerid3);
        jLabelCustomerName3.setText(customername3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ProceedToCheckout3 = new javax.swing.JButton();
        jButtonBFVEC3 = new javax.swing.JButton();
        jLabelVEC3Min = new javax.swing.JLabel();
        jLabelVEC3Close = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        VECDetails2 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jButtonFetchinVEC3 = new javax.swing.JButton();
        jButtonRemoveFromCart3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabelItemID = new javax.swing.JLabel();
        jLabelItemBrand = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelItemDescription = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelItemPrice = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelItemValidationLeft = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelItemWeight = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        QuantityEntry = new javax.swing.JTextField();
        QuantityInc = new javax.swing.JButton();
        QuantityDec = new javax.swing.JButton();
        jButtonQuantityUpdate3 = new javax.swing.JButton();
        jLabelSoldItemsQuantity = new javax.swing.JLabel();
        jLabelSoldItemsID = new javax.swing.JLabel();
        jLabelCustomerID3 = new javax.swing.JLabel();
        jLabelCustomerName3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(17, 32, 65));

        ProceedToCheckout3.setBackground(new java.awt.Color(234, 67, 73));
        ProceedToCheckout3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ProceedToCheckout3.setForeground(new java.awt.Color(240, 240, 240));
        ProceedToCheckout3.setText("Proceed to checkout");
        ProceedToCheckout3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedToCheckout3ActionPerformed(evt);
            }
        });

        jButtonBFVEC3.setBackground(new java.awt.Color(243, 67, 73));
        jButtonBFVEC3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBFVEC3.setForeground(new java.awt.Color(240, 240, 240));
        jButtonBFVEC3.setText("<-");
        jButtonBFVEC3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBFVEC3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBFVEC3MouseClicked(evt);
            }
        });
        jButtonBFVEC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBFVEC3ActionPerformed(evt);
            }
        });

        jLabelVEC3Min.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelVEC3Min.setForeground(new java.awt.Color(240, 240, 240));
        jLabelVEC3Min.setText("-");
        jLabelVEC3Min.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelVEC3Min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelVEC3MinMouseClicked(evt);
            }
        });

        jLabelVEC3Close.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelVEC3Close.setForeground(new java.awt.Color(240, 240, 240));
        jLabelVEC3Close.setText("X");
        jLabelVEC3Close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelVEC3Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelVEC3CloseMouseClicked(evt);
            }
        });

        /////////////////
        //VECDetails = new JTable()
        //{
            //    public boolean isCellEditable(int row, int column)
            //   {
                //        for(int i=0 ; i<VECDetails2.getRowCount() ;i++)
                //        {
                    //            if(row == i)
                    //            {
                        //                return false;
                        //            }
                    //        }
                //        return true;
                //    }
            //};
        /////////////////
        VECDetails2.setBackground(new java.awt.Color(243, 67, 73));
        VECDetails2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        VECDetails2.setForeground(new java.awt.Color(240, 240, 240));
        VECDetails2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token ID", "Item ID", "Brand", "Type/Description", "Price", "Validation Left", "Weight(gm)", "Quantity"
            }
        ));
        VECDetails2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VECDetails2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(VECDetails2);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("View and Edit Cart3");

        jButtonFetchinVEC3.setBackground(new java.awt.Color(243, 67, 73));
        jButtonFetchinVEC3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonFetchinVEC3.setForeground(new java.awt.Color(240, 240, 240));
        jButtonFetchinVEC3.setText("Fetch");
        jButtonFetchinVEC3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFetchinVEC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFetchinVEC3ActionPerformed(evt);
            }
        });

        jButtonRemoveFromCart3.setBackground(new java.awt.Color(243, 67, 73));
        jButtonRemoveFromCart3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonRemoveFromCart3.setForeground(new java.awt.Color(240, 240, 240));
        jButtonRemoveFromCart3.setText("Remove From Cart");
        jButtonRemoveFromCart3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRemoveFromCart3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRemoveFromCart3MouseClicked(evt);
            }
        });
        jButtonRemoveFromCart3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFromCart3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("ID:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Brand:");

        jLabelItemID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemID.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemID.setText("ID");

        jLabelItemBrand.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemBrand.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemBrand.setText("Brand");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Type/Description:");

        jLabelItemDescription.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemDescription.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemDescription.setText("Type/Description");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("Price:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("Price:");

        jLabelItemPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemPrice.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemPrice.setText("Price");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Validation Left:");

        jLabelItemValidationLeft.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemValidationLeft.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemValidationLeft.setText("Validation Left");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Weight:");

        jLabelItemWeight.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItemWeight.setForeground(new java.awt.Color(240, 240, 240));
        jLabelItemWeight.setText("Weight");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(240, 240, 240));
        jLabel11.setText("Change Quantity:");

        QuantityEntry.setBackground(new java.awt.Color(234, 67, 73));
        QuantityEntry.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        QuantityEntry.setForeground(new java.awt.Color(240, 240, 240));
        QuantityEntry.setText("1");
        QuantityEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityEntryActionPerformed(evt);
            }
        });

        QuantityInc.setBackground(new java.awt.Color(243, 67, 73));
        QuantityInc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        QuantityInc.setForeground(new java.awt.Color(240, 240, 240));
        QuantityInc.setText("^");
        QuantityInc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        QuantityInc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QuantityIncMouseClicked(evt);
            }
        });
        QuantityInc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityIncActionPerformed(evt);
            }
        });

        QuantityDec.setBackground(new java.awt.Color(243, 67, 73));
        QuantityDec.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        QuantityDec.setForeground(new java.awt.Color(240, 240, 240));
        QuantityDec.setText("v");
        QuantityDec.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        QuantityDec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QuantityDecMouseClicked(evt);
            }
        });
        QuantityDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityDecActionPerformed(evt);
            }
        });

        jButtonQuantityUpdate3.setBackground(new java.awt.Color(243, 67, 73));
        jButtonQuantityUpdate3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonQuantityUpdate3.setForeground(new java.awt.Color(240, 240, 240));
        jButtonQuantityUpdate3.setText("Confirm");
        jButtonQuantityUpdate3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonQuantityUpdate3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuantityUpdate3ActionPerformed(evt);
            }
        });

        jLabelSoldItemsQuantity.setBackground(new java.awt.Color(17, 32, 65));
        jLabelSoldItemsQuantity.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabelSoldItemsQuantity.setForeground(new java.awt.Color(240, 240, 240));
        jLabelSoldItemsQuantity.setText("SoldItemsQuantity");

        jLabelSoldItemsID.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        jLabelSoldItemsID.setForeground(new java.awt.Color(240, 240, 240));
        jLabelSoldItemsID.setText("SoldItemsID");

        jLabelCustomerID3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCustomerID3.setForeground(new java.awt.Color(240, 240, 240));
        jLabelCustomerID3.setText("ID");

        jLabelCustomerName3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCustomerName3.setForeground(new java.awt.Color(240, 240, 240));
        jLabelCustomerName3.setText("User");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jLabelSoldItemsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ProceedToCheckout3)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFetchinVEC3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonBFVEC3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(58, 58, 58)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelVEC3Min, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel1))
                                            .addGap(86, 86, 86)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabelItemBrand)
                                                .addComponent(jLabelItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel8)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel5))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabelItemWeight)
                                                .addComponent(jLabelItemValidationLeft)
                                                .addComponent(jLabelItemPrice)
                                                .addComponent(jLabelItemDescription)))))
                                .addGap(18, 18, 18)
                                .addComponent(jLabelVEC3Close)
                                .addGap(30, 30, 30))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(QuantityEntry)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(QuantityInc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(QuantityDec, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonRemoveFromCart3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonQuantityUpdate3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabelSoldItemsID, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCustomerName3)
                            .addComponent(jLabelCustomerID3))
                        .addGap(255, 255, 255))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(574, 574, 574)
                    .addComponent(jLabel7)
                    .addContainerGap(574, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonBFVEC3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelVEC3Close)
                            .addComponent(jLabelVEC3Min)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonFetchinVEC3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProceedToCheckout3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSoldItemsQuantity))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelSoldItemsID)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabelItemID))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabelItemBrand))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabelItemDescription))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabelItemPrice))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabelItemValidationLeft))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabelItemWeight))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(QuantityEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(QuantityInc)
                            .addComponent(QuantityDec))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonQuantityUpdate3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRemoveFromCart3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(jLabelCustomerID3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelCustomerName3)
                        .addGap(0, 29, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(293, 293, 293)
                    .addComponent(jLabel7)
                    .addContainerGap(317, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProceedToCheckout3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedToCheckout3ActionPerformed
        /* try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            //Statement stLogin = connectionLogin.createStatement();
            //String sqlLogin = "select * from Owner where OwnerEmail = ? and OwnerPassword = ?";
            //PreparedStatement pstLogin = connectionLogin.prepareStatement(sqlLogin);
            //Date date = new Date();
            //java.sql.Date joiningdate = new java.sql.Date(date.getTime());
            Date manufacturedatecheck = ItemManufactureDate.getDate();
            Date expirationdatecheck = ItemExpirationDate.getDate();
            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());

            float purchaseprice = Float.parseFloat(ItemPRTo.getText());
            float sellingprice = Float.parseFloat(ItemPRFrom.getText());

            if(manufacturedatecheck.compareTo(expirationdatecheck)>0)
            {
                JOptionPane.showMessageDialog(this,"Manufacture date can't be after the Expiration date of an item. Insert Correctly!");
            }

            if(expirationdatecheck.compareTo(presentdatecheck)<=0)
            {
                JOptionPane.showMessageDialog(this,"Expired product can't be added. Check expiration date!");
            }

            if(purchaseprice>sellingprice)
            {
                JOptionPane.showMessageDialog(this,"Purchase Price can't be higher than Selling Price");
            }

            if(Integer.parseInt(ItemQuantity.getText())<=0)
            {
                JOptionPane.showMessageDialog(this,"Item Quantity must be more than zero");
            }

            //if(Integer.parseInt(ItemPurchasePrice.getText())>Integer.parseInt(ItemSellingPrice.getText()))
            //{
                //    JOptionPane.showMessageDialog(this,"Purchase Price can't be higher than Selling Price");
                //}

            if(manufacturedatecheck.compareTo(expirationdatecheck)<=0 && expirationdatecheck.compareTo(presentdatecheck)>0 && Integer.parseInt(ItemQuantity.getText())>0 &&purchaseprice<sellingprice)
            {
                String sqlInsert = "insert into Item"
                +"(ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemWeight,ItemQuantity,ItemStatus)"
                +"values(?,?,?,?,?,?,?,?,?)";

                PreparedStatement pst = con.prepareStatement(sqlInsert);
                pst.setString(1, ItemBrand.getText());
                pst.setString(2, ItemDescription.getText());
                pst.setFloat(3, purchaseprice);
                pst.setFloat(4, sellingprice);

                //pst.setString(5, ItemManufactureDate.getDateFormatString());
                SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                pst.setString(5, manufacturedate);

                //pst.setString(6, ItemExpirationDate.getDateFormatString());
                SimpleDateFormat edf = new SimpleDateFormat("yyyy-MM-dd");
                String expirationdate = edf.format(ItemExpirationDate.getDate());
                pst.setString(6, expirationdate);

                pst.setString(7, ItemWeight.getText());
                pst.setString(8, ItemQuantity.getText());
                pst.setString(9, "Available");

                pst.executeUpdate();
                JOptionPane.showMessageDialog(this,"Item insert into stock Successfully");
            }

            //connectionLogin.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(this,e.getMessage());
        }*/

        //DefaultTableModel VECDetails = new DefaultTableModel();
        if(VECDetails2.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(this,"Cart is empty");
        }
        else
        {
            //int a = Integer.parseInt(QuantityEntry.getText());
            //a++;
            //Integer x = new Integer(a);
            //QuantityEntry.setText(x.toString());
            for(int i=0;i<VECDetails2.getRowCount();i++)
            {
                System.out.println(VECDetails2.getRowCount());
                itemsid3+="("+(i+1)+")"+VECDetails2.getValueAt(i, 1).toString()+" ";
                itemsbrand3+="("+(i+1)+")"+VECDetails2.getValueAt(i, 2).toString()+" ";
                itemsdescription3+="("+(i+1)+")"+VECDetails2.getValueAt(i, 3).toString()+" ";

                itemssellingprice3+="("+(i+1)+")"+VECDetails2.getValueAt(i, 4).toString()+" ";
                itemsquantity3+="("+(i+1)+")"+VECDetails2.getValueAt(i, 7).toString()+" ";

                float a = Float.parseFloat(VECDetails2.getValueAt(i, 4).toString());
                Float x = new Float(a);
                float b = Float.parseFloat(VECDetails2.getValueAt(i, 7).toString());
                Float y = new Float(b);
                totalprice3 = totalprice3 + x*y;

                System.out.println(itemsid3);
                System.out.println(itemsbrand3);
                System.out.println(itemsdescription3);
                System.out.println(itemssellingprice3);
                System.out.println(itemsquantity3);
            }

            customerid4 = jLabelCustomerID3.getText();
            customername4 = jLabelCustomerName3.getText();
            
            new Checkout3(itemsid3,itemsbrand3,itemsdescription3,itemssellingprice3,itemsquantity3,String.valueOf(totalprice3),customerid4,customername4).setVisible(true);
            //new Checkout(itemsid,itemsbrand,itemsdescription,itemssellingprice,itemsquantity);
            this.dispose();
        }
    }//GEN-LAST:event_ProceedToCheckout3ActionPerformed

    private void jButtonBFVEC3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBFVEC3MouseClicked
        /*BuyItems bi2 = new BuyItems();
        bi2.setVisible(true);
        bi2.pack();
        bi2.setLocationRelativeTo(null);
        bi2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();*/
        
        new BuyItems(customerid3,customername3).setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButtonBFVEC3MouseClicked

    private void jButtonBFVEC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBFVEC3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBFVEC3ActionPerformed

    private void jLabelVEC3MinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelVEC3MinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelVEC3MinMouseClicked

    private void jLabelVEC3CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelVEC3CloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelVEC3CloseMouseClicked

    private void VECDetails2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VECDetails2MouseClicked
        /* int row = VECDetails.getSelectedRow();
        String selection = VECDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemID.setText(rs3.getString("ItemId"));
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));

                itemid = rs3.getString("ItemId");
                itembrand = rs3.getString("ItemBrand");
                itemdescription = rs3.getString("ItemDescription");
                itemsellingprice = rs3.getString("ItemSellingPrice");
                itemmd = rs3.getString("ItemManufactureDate");
                itemed = rs3.getString("ItemExpirationDate");
                itemvl = rs3.getString("ItemValidationLeft");
                itemweight = rs3.getString("ItemWeight");
                itemstatus = rs3.getString("ItemStatus");
                //ItemPRTo.setText(rs3.getString("ItemPurchasePrice"));
                //ItemPRFrom.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //pst.setString(5, manufacturedate);
                //ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                //ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                //ItemWeight.setText(rs3.getString("ItemWeight"));
                //ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }

        if(evt.getClickCount()==2)
        {
            //AddToCart atc = new AddToCart();
            //atc.setVisible(true);
            //atc.pack();
            //atc.setLocationRelativeTo(null);
            //atc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            //this.dispose();
            new AddToCart(itemid,itembrand,itemdescription,itemsellingprice,itemmd,itemed,itemvl,itemweight,itemstatus).setVisible(true);
            this.dispose();
        }*/
        int row = VECDetails2.getSelectedRow();
        String selection = VECDetails2.getModel().getValueAt(row,1).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            //String sql3 = "select * from SoldItems where ItemId = " + selection;
            String sql3 = "select * from SoldItems LEFT JOIN Item on SoldItems.ItemId = Item.ItemId where Item.ItemId = " + selection;
            //String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                jLabelItemID.setText(rs3.getString("ItemId"));
                jLabelItemBrand.setText(rs3.getString("ItemBrand"));
                jLabelItemDescription.setText(rs3.getString("ItemDescription"));
                jLabelItemPrice.setText(rs3.getString("ItemSellingPrice"));
                jLabelItemValidationLeft.setText(rs3.getString("ItemValidationLeft"));
                jLabelItemWeight.setText(rs3.getString("ItemWeight"));
                //jLabelSoldItemsQuantity.setText(rs3.getString("SoldItemsQuantity"));
                //QuantityEntry.setText(rs3.getString("SoldItemsQuantity"));
                jLabelSoldItemsQuantity.setText(VECDetails2.getModel().getValueAt(row,7).toString());
                QuantityEntry.setText(VECDetails2.getModel().getValueAt(row,7).toString());
                jLabelSoldItemsID.setText(VECDetails2.getModel().getValueAt(row,0).toString());
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_VECDetails2MouseClicked

    private void jButtonFetchinVEC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFetchinVEC3ActionPerformed
        /*try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            /*  Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
            "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
            "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
            "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            VECDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }*/

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            VECDetails2.setModel(new DefaultTableModel(null, new String[]{"Token ID","Item ID","Brand","Type/Description","Price","Validation Left","Weight(gm)","Quantity"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from SoldItems LEFT JOIN Item on SoldItems.ItemId = Item.ItemId";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String TokenId = String.valueOf(rs2.getInt("SoldItemsId"));
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                //String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                //String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemPrice = rs2.getString("ItemSellingPrice");
                //String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                //String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("SoldItemsQuantity");
                //String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {TokenId,ItemId,ItemBrand,ItemDescription,ItemPrice,ItemValidationLeft,ItemWeight,ItemQuantity};
                DefaultTableModel items = (DefaultTableModel)VECDetails2.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonFetchinVEC3ActionPerformed

    private void jButtonRemoveFromCart3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRemoveFromCart3MouseClicked
        /*  AddToCart atc = new AddToCart();
        atc.setVisible(true);
        atc.pack();
        atc.setLocationRelativeTo(null);
        atc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();*/
    }//GEN-LAST:event_jButtonRemoveFromCart3MouseClicked

    private void jButtonRemoveFromCart3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFromCart3ActionPerformed
        /* int row = VECDetails.getSelectedRow();
        String selection = VECDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemID.setText(rs3.getString("ItemId"));
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));

                itemid = rs3.getString("ItemId");
                itembrand = rs3.getString("ItemBrand");
                itemdescription = rs3.getString("ItemDescription");
                itemsellingprice = rs3.getString("ItemSellingPrice");
                itemmd = rs3.getString("ItemManufactureDate");
                itemed = rs3.getString("ItemExpirationDate");
                itemvl = rs3.getString("ItemValidationLeft");
                itemweight = rs3.getString("ItemWeight");
                itemstatus = rs3.getString("ItemStatus");

                /*new OwnerInterface(username).setVisible(true); /*******************/
                //oiStart.setVisible(true);
                //oiStart.pack();
                //oiStart.setLocationRelativeTo(null);
                //oiStart.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                //this.dispose();

                /*new AddToCart(itemid,itembrand,itemdescription,itemsellingprice,itemmd,itemed,itemvl,itemweight,itemstatus).setVisible(true);
                this.dispose();
                //ItemPRTo.setText(rs3.getString("ItemPurchasePrice"));
                //ItemPRFrom.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //pst.setString(5, manufacturedate);
                //ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                //ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                //ItemWeight.setText(rs3.getString("ItemWeight"));
                //ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }*/

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            //Statement stLogin = connectionLogin.createStatement();
            //String sqlLogin = "select * from Owner where OwnerEmail = ? and OwnerPassword = ?";
            //PreparedStatement pstLogin = connectionLogin.prepareStatement(sqlLogin);

            String sql = "UPDATE Item set ItemQuantity=ItemQuantity+? where ItemId=?;\n" +
            "DELETE FROM SoldItems where SoldItemsId=?";

            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, jLabelSoldItemsQuantity.getText());
            pst.setString(2, jLabelItemID.getText());
            pst.setString(3, jLabelSoldItemsID.getText());
            pst.executeUpdate();
            jLabelSoldItemsQuantity.setText("0");
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            //JOptionPane.showMessageDialog(this,e.getMessage());
            JOptionPane.showMessageDialog(this,"You didn't choose any item");
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            VECDetails2.setModel(new DefaultTableModel(null, new String[]{"Token ID","Item ID","Brand","Type/Description","Price","Validation Left","Weight(gm)","Quantity"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from SoldItems LEFT JOIN Item on SoldItems.ItemId = Item.ItemId";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String TokenId = String.valueOf(rs2.getInt("SoldItemsId"));
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                //String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                //String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemPrice = rs2.getString("ItemSellingPrice");
                //String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                //String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("SoldItemsQuantity");
                //String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {TokenId,ItemId,ItemBrand,ItemDescription,ItemPrice,ItemValidationLeft,ItemWeight,ItemQuantity};
                DefaultTableModel items = (DefaultTableModel)VECDetails2.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,"You didn't choose any item");
        }
    }//GEN-LAST:event_jButtonRemoveFromCart3ActionPerformed

    private void QuantityEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantityEntryActionPerformed

    private void QuantityIncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QuantityIncMouseClicked
        int a = Integer.parseInt(QuantityEntry.getText());
        a++;
        Integer x = new Integer(a);
        QuantityEntry.setText(x.toString());
    }//GEN-LAST:event_QuantityIncMouseClicked

    private void QuantityIncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityIncActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantityIncActionPerformed

    private void QuantityDecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QuantityDecMouseClicked
        int a = Integer.parseInt(QuantityEntry.getText());
        a--;
        Integer x = new Integer(a);
        if(x>0)
        {
            QuantityEntry.setText(x.toString());
        }
    }//GEN-LAST:event_QuantityDecMouseClicked

    private void QuantityDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityDecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantityDecActionPerformed

    private void jButtonQuantityUpdate3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuantityUpdate3ActionPerformed
        String SoldItemsQuantity = "";
        String ItemQuantityInStock = "";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            VECDetails2.setModel(new DefaultTableModel(null, new String[]{"Token ID","Item ID","Brand","Type/Description","Price","Validation Left","Weight(gm)","Quantity"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from SoldItems LEFT JOIN Item on SoldItems.ItemId = Item.ItemId";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String TokenId = String.valueOf(rs2.getInt("SoldItemsId"));
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                //String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                //String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemPrice = rs2.getString("ItemSellingPrice");
                //String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                //String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("SoldItemsQuantity");
                ItemQuantityInStock = rs2.getString("ItemQuantity");

                SoldItemsQuantity = ItemQuantity;
                //String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {TokenId,ItemId,ItemBrand,ItemDescription,ItemPrice,ItemValidationLeft,ItemWeight,ItemQuantity};
                DefaultTableModel items = (DefaultTableModel)VECDetails2.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }

        int a = Integer.parseInt(QuantityEntry.getText());
        Integer x = new Integer(a);

        int b = Integer.parseInt(jLabelSoldItemsQuantity.getText());
        Integer y = new Integer(b);

        System.out.println(SoldItemsQuantity);
        System.out.println(jLabelSoldItemsQuantity.getText());

        int q = Integer.parseInt(ItemQuantityInStock);
        Integer qis = new Integer(q);

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            //Statement stLogin = connectionLogin.createStatement();
            //String sqlLogin = "select * from Owner where OwnerEmail = ? and OwnerPassword = ?";
            //PreparedStatement pstLogin = connectionLogin.prepareStatement(sqlLogin);
            if(x>y && x>0)
            {
                if(x>y+qis)
                {
                    JOptionPane.showMessageDialog(this,"Quantity exceeded. Total "+(y+qis)+" pieces available in stock");
                }
                else
                {
                    int z = x-y;
                    String sql = "UPDATE Item set ItemQuantity=(ItemQuantity-?) where ItemId=?;\n" +
                    "UPDATE SoldItems set SoldItemsQuantity=(SoldItemsQuantity+?) where SoldItemsId=?;\n";

                    //String sqlUpdate = "update Item set ItemQuantity=(ItemQuantity-?) where ItemId=?";
                    PreparedStatement pst = con.prepareStatement(sql);
                    pst.setString(1, String.valueOf(z));
                    pst.setString(2, jLabelItemID.getText());
                    pst.setString(3, String.valueOf(z));
                    pst.setString(4, jLabelSoldItemsID.getText());
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this,"Item Quantity updated");
                    jLabelSoldItemsQuantity.setText(QuantityEntry.getText());
                }

            }

            if(x<y && x>0)
            {
                int z = y-x;
                String sql = "UPDATE Item set ItemQuantity=(ItemQuantity+?) where ItemId=?;\n" +
                "UPDATE SoldItems set SoldItemsQuantity=(SoldItemsQuantity-?) where SoldItemsId=?;\n";

                //String sqlUpdate = "update Item set ItemQuantity=(ItemQuantity-?) where ItemId=?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, String.valueOf(z));
                pst.setString(2, jLabelItemID.getText());
                pst.setString(3, String.valueOf(z));
                pst.setString(4, jLabelSoldItemsID.getText());
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this,"Item Quantity updated");
                jLabelSoldItemsQuantity.setText(QuantityEntry.getText());
            }

            if(x<=0)
            {
                JOptionPane.showMessageDialog(this,"Item Quantity must be more than zero. If you don't want the item anymore than remove it from the cart");
            }

            //String sql = "UPDATE Item set ItemQuantity=(ItemQuantity-?) where ItemId=?;\n" +
            //             "INSERT INTO SoldItems"
            //             +"(ItemId,SoldItemsQuantity)"
            //             +"values(?,?)";

            //String sqlUpdate = "update Item set ItemQuantity=(ItemQuantity-?) where ItemId=?";
            //PreparedStatement pst = con.prepareStatement(sql);
            //pst.setString(1, QuantityEntry.getText());
            //pst.setString(2, jLabelItemID.getText());
            //pst.setString(3, jLabelItemID.getText());
            //pst.setString(4, QuantityEntry.getText());
            //pst.executeUpdate();

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            //JOptionPane.showMessageDialog(this,e.getMessage());
            JOptionPane.showMessageDialog(this,"You didn't choose any item");
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            VECDetails2.setModel(new DefaultTableModel(null, new String[]{"Token ID","Item ID","Brand","Type/Description","Price","Validation Left","Weight(gm)","Quantity"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from SoldItems LEFT JOIN Item on SoldItems.ItemId = Item.ItemId";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String TokenId = String.valueOf(rs2.getInt("SoldItemsId"));
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                //String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                //String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemPrice = rs2.getString("ItemSellingPrice");
                //String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                //String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("SoldItemsQuantity");
                //String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {TokenId,ItemId,ItemBrand,ItemDescription,ItemPrice,ItemValidationLeft,ItemWeight,ItemQuantity};
                DefaultTableModel items = (DefaultTableModel)VECDetails2.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,"You didn't choose any item");
        }
    }//GEN-LAST:event_jButtonQuantityUpdate3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewEditCart3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewEditCart3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewEditCart3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewEditCart3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewEditCart3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ProceedToCheckout3;
    private javax.swing.JButton QuantityDec;
    private javax.swing.JTextField QuantityEntry;
    private javax.swing.JButton QuantityInc;
    private javax.swing.JTable VECDetails2;
    private javax.swing.JButton jButtonBFVEC3;
    private javax.swing.JButton jButtonFetchinVEC3;
    private javax.swing.JButton jButtonQuantityUpdate3;
    private javax.swing.JButton jButtonRemoveFromCart3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCustomerID3;
    private javax.swing.JLabel jLabelCustomerName3;
    private javax.swing.JLabel jLabelItemBrand;
    private javax.swing.JLabel jLabelItemDescription;
    private javax.swing.JLabel jLabelItemID;
    private javax.swing.JLabel jLabelItemPrice;
    private javax.swing.JLabel jLabelItemValidationLeft;
    private javax.swing.JLabel jLabelItemWeight;
    private javax.swing.JLabel jLabelSoldItemsID;
    private javax.swing.JLabel jLabelSoldItemsQuantity;
    private javax.swing.JLabel jLabelVEC3Close;
    private javax.swing.JLabel jLabelVEC3Min;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
