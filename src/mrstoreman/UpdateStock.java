/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrstoreman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mahdi
 */
public class UpdateStock extends javax.swing.JFrame {

    /**
     * Creates new form UpdateStock
     */
    public UpdateStock() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ItemBrand = new javax.swing.JTextField();
        ItemDescription = new javax.swing.JTextField();
        ItemPurchasePrice = new javax.swing.JTextField();
        ItemWeight = new javax.swing.JTextField();
        ItemQuantity = new javax.swing.JTextField();
        jButtonBFUIS = new javax.swing.JButton();
        jLabelUISMin = new javax.swing.JLabel();
        jLabelUISClose = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ItemSellingPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ItemManufactureDate = new com.toedter.calendar.JDateChooser();
        ItemExpirationDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        USDetails = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jButtonSearchUS = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonUpdateFromEmployeeTable = new javax.swing.JButton();
        jButtonFetchinUI = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(17, 32, 65));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Brand:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Type/Description:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Purchase Price:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("weight:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("Quantity:");

        ItemBrand.setBackground(new java.awt.Color(234, 67, 73));
        ItemBrand.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemBrand.setForeground(new java.awt.Color(240, 240, 240));

        ItemDescription.setBackground(new java.awt.Color(234, 67, 73));
        ItemDescription.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemDescription.setForeground(new java.awt.Color(240, 240, 240));
        ItemDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemDescriptionActionPerformed(evt);
            }
        });

        ItemPurchasePrice.setBackground(new java.awt.Color(234, 67, 73));
        ItemPurchasePrice.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemPurchasePrice.setForeground(new java.awt.Color(240, 240, 240));
        ItemPurchasePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPurchasePriceActionPerformed(evt);
            }
        });

        ItemWeight.setBackground(new java.awt.Color(234, 67, 73));
        ItemWeight.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemWeight.setForeground(new java.awt.Color(240, 240, 240));
        ItemWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemWeightActionPerformed(evt);
            }
        });

        ItemQuantity.setBackground(new java.awt.Color(234, 67, 73));
        ItemQuantity.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemQuantity.setForeground(new java.awt.Color(240, 240, 240));
        ItemQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemQuantityActionPerformed(evt);
            }
        });

        jButtonBFUIS.setBackground(new java.awt.Color(243, 67, 73));
        jButtonBFUIS.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBFUIS.setForeground(new java.awt.Color(240, 240, 240));
        jButtonBFUIS.setText("<-");
        jButtonBFUIS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBFUIS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBFUISMouseClicked(evt);
            }
        });
        jButtonBFUIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBFUISActionPerformed(evt);
            }
        });

        jLabelUISMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelUISMin.setForeground(new java.awt.Color(240, 240, 240));
        jLabelUISMin.setText("-");
        jLabelUISMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelUISMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelUISMinMouseClicked(evt);
            }
        });

        jLabelUISClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelUISClose.setForeground(new java.awt.Color(240, 240, 240));
        jLabelUISClose.setText("X");
        jLabelUISClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelUISClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelUISCloseMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("Selling Price:");

        ItemSellingPrice.setBackground(new java.awt.Color(234, 67, 73));
        ItemSellingPrice.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemSellingPrice.setForeground(new java.awt.Color(240, 240, 240));
        ItemSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSellingPriceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("Manufacture date:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setText("Expiration date:");

        ItemManufactureDate.setBackground(new java.awt.Color(51, 51, 0));
        ItemManufactureDate.setForeground(new java.awt.Color(240, 240, 240));

        ItemExpirationDate.setBackground(new java.awt.Color(51, 51, 0));
        ItemExpirationDate.setForeground(new java.awt.Color(240, 240, 240));

        USDetails.setBackground(new java.awt.Color(243, 67, 73));
        USDetails.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        USDetails.setForeground(new java.awt.Color(240, 240, 240));
        USDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Type/Description", "Purchase Price", "Selling Price", "Manufacture Date", "Expiration Date", "Validation Left", "Weight(gm)", "Quantity", "Status"
            }
        ));
        USDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                USDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(USDetails);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Update Item Information from Stock");

        jButtonSearchUS.setBackground(new java.awt.Color(243, 67, 73));
        jButtonSearchUS.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonSearchUS.setForeground(new java.awt.Color(240, 240, 240));
        jButtonSearchUS.setText("Search");
        jButtonSearchUS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSearchUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchUSActionPerformed(evt);
            }
        });

        jButtonClear.setBackground(new java.awt.Color(234, 67, 73));
        jButtonClear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonClear.setForeground(new java.awt.Color(240, 240, 240));
        jButtonClear.setText("Clear");
        jButtonClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonClearMouseClicked(evt);
            }
        });
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonUpdateFromEmployeeTable.setBackground(new java.awt.Color(234, 67, 73));
        jButtonUpdateFromEmployeeTable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonUpdateFromEmployeeTable.setForeground(new java.awt.Color(240, 240, 240));
        jButtonUpdateFromEmployeeTable.setText("Update");
        jButtonUpdateFromEmployeeTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateFromEmployeeTableActionPerformed(evt);
            }
        });

        jButtonFetchinUI.setBackground(new java.awt.Color(243, 67, 73));
        jButtonFetchinUI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonFetchinUI.setForeground(new java.awt.Color(240, 240, 240));
        jButtonFetchinUI.setText("Fetch");
        jButtonFetchinUI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFetchinUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFetchinUIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jButtonBFUIS)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ItemExpirationDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ItemWeight)
                            .addComponent(ItemQuantity)
                            .addComponent(ItemSellingPrice)
                            .addComponent(ItemManufactureDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ItemPurchasePrice)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSearchUS, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ItemDescription)
                            .addComponent(ItemBrand, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelUISMin)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelUISClose)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonUpdateFromEmployeeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFetchinUI, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonBFUIS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ItemBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(ItemDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(ItemPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(ItemSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ItemManufactureDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ItemExpirationDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ItemWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(ItemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonClear)
                            .addComponent(jButtonSearchUS)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelUISClose)
                            .addComponent(jLabelUISMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonUpdateFromEmployeeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButtonFetchinUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ItemDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemDescriptionActionPerformed

    private void ItemPurchasePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPurchasePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemPurchasePriceActionPerformed

    private void ItemWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemWeightActionPerformed

    private void ItemQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemQuantityActionPerformed

    private void jButtonBFUISMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBFUISMouseClicked
        ItemInfo ii3 = new ItemInfo();
        ii3.setVisible(true);
        ii3.pack();
        ii3.setLocationRelativeTo(null);
        ii3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButtonBFUISMouseClicked

    private void jButtonBFUISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBFUISActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBFUISActionPerformed

    private void jLabelUISMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUISMinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelUISMinMouseClicked

    private void jLabelUISCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUISCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelUISCloseMouseClicked

    private void ItemSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSellingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSellingPriceActionPerformed

    private void USDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_USDetailsMouseClicked
        int row = USDetails.getSelectedRow();
        String selection = USDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));
                ItemPurchasePrice.setText(rs3.getString("ItemPurchasePrice"));
                ItemSellingPrice.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //**/pst.setString(5, manufacturedate);
                ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                ItemWeight.setText(rs3.getString("ItemWeight"));
                ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_USDetailsMouseClicked

    private void jButtonSearchUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchUSActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
                               "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            USDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }
        
        try {
            USDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            int checkbrand=0,checkdescription=0,checkpp=0,checksp=0,checkmd=0,checked=0,checkweight=0;
            String sql1 = "SELECT * FROM Item WHERE ";
            if(ItemBrand.getText().length()>0)
            {
                sql1 +="ItemBrand LIKE '%"+ItemBrand.getText()+"%'";
                checkbrand=1;
            }

            if(ItemDescription.getText().length()>0)
            {
                if(checkbrand==0)
                {
                    sql1 += "ItemDescription LIKE '%"+ItemDescription.getText()+"%'";
                }
                else if(checkbrand==1)
                {
                    sql1 += "OR ItemDescription LIKE '%"+ItemDescription.getText()+"%'";
                }
                checkdescription=1;
            }

            if(ItemPurchasePrice.getText().length()>0)
            {
                if(checkbrand==0&&checkdescription==0)
                {
                    sql1 += "ItemPurchasePrice LIKE '%"+ItemPurchasePrice.getText()+"%'";
                }
                else if(checkbrand==1||checkdescription==1)
                {
                    sql1 += "OR ItemPurchasePrice LIKE '%"+ItemPurchasePrice.getText()+"%'";
                }
                checkpp=1;
            }

            if(ItemSellingPrice.getText().length()>0)
            {
                if(checkbrand==0&&checkdescription==0&&checkpp==0)
                {
                    sql1 += "ItemSellingPrice LIKE '%"+ItemSellingPrice.getText()+"%'";
                }
                if(checkbrand==1||checkdescription==1||checkpp==1)
                {
                    sql1 += "OR ItemSellingPrice LIKE '%"+ItemSellingPrice.getText()+"%'";
                }
                checksp=1;
            }

            if(ItemManufactureDate.getDate() != null)
            {
                Date manufacturedatecheck = ItemManufactureDate.getDate();
                SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //**/pst.setString(5, manufacturedate);
                if(checkbrand==0&&checkdescription==0&&checkpp==0&&checksp==0)
                {
                    sql1 += "ItemManufactureDate LIKE '%"+manufacturedate+"%'";
                }
                if(checkbrand==1||checkdescription==1||checkpp==1||checksp==1)
                {
                    sql1 += "OR ItemManufactureDate LIKE '%"+manufacturedate+"%'";
                }
                checkmd=1;
            }

            if(ItemExpirationDate.getDate() != null)
            {
                Date expirationdatecheck = ItemExpirationDate.getDate();
                SimpleDateFormat edf = new SimpleDateFormat("yyyy-MM-dd");
                String expirationdate = edf.format(ItemExpirationDate.getDate());
                //**/pst.setString(6, expirationdate);
                if(checkbrand==0&&checkdescription==0&&checkpp==0&&checksp==0&&checkmd==0)
                {
                    sql1 += "ItemExpirationDate LIKE '%"+expirationdate+"%'";
                }
                if(checkbrand==1||checkdescription==1||checkpp==1||checksp==1||checkmd==1)
                {
                    sql1 += "OR ItemExpirationDate LIKE '%"+expirationdate+"%'";
                }
                checked=1;
            }

            if(ItemWeight.getText().length()>0)
            {
                if(checkbrand==0&&checkdescription==0&&checkpp==0&&checksp==0&&checkmd==0&&checked==0)
                {
                    sql1 += "ItemWeight LIKE '%"+ItemWeight.getText()+"%'";
                }
                if(checkbrand==1||checkdescription==1||checkpp==1||checksp==1||checkmd==1||checked==1)
                {
                    sql1 += "OR ItemWeight LIKE '%"+ItemWeight.getText()+"%'";
                }
                checkweight=1;
            }

            if(ItemQuantity.getText().length()>0)
            {
                if(checkbrand==0&&checkdescription==0&&checkpp==0&&checksp==0&&checkmd==0&&checked==0&&checkweight==0)
                {
                    sql1 += "ItemQuantity LIKE '%"+ItemQuantity.getText()+"%'";
                }
                if(checkbrand==1||checkdescription==1||checkpp==1||checksp==1||checkmd==1||checked==1||checkweight==1)
                {
                    sql1 += "OR ItemQuantity LIKE '%"+ItemQuantity.getText()+"%'";
                }
            }

            //sql1 += "AND EmployeeQuittingDate = 'In Contract' ";

            System.out.println("sql query is "+sql1);

            PreparedStatement pst = connection.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();

            while(rs1.next()){
                String ItemId = String.valueOf(rs1.getInt("ItemId"));
                String ItemBrand = rs1.getString("ItemBrand");
                String ItemDescription = rs1.getString("ItemDescription");
                String ItemPurchasePrice = rs1.getString("ItemPurchasePrice");
                String ItemSellingPrice = rs1.getString("ItemSellingPrice");
                String ItemManufactureDate = rs1.getString("ItemManufactureDate");
                String ItemExpirationDate = rs1.getString("ItemExpirationDate");
                String ItemValidationLeft = rs1.getString("ItemValidationLeft");
                String ItemWeight = rs1.getString("ItemWeight");
                String ItemQuantity = rs1.getString("ItemQuantity");
                String ItemStatus = rs1.getString("ItemStatus");

                String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                DefaultTableModel items = (DefaultTableModel)USDetails.getModel();
                items.addRow(ItemData);
            }

            //connection.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonSearchUSActionPerformed

    private void jButtonClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonClearMouseClicked
        ItemBrand.setText("");
        ItemDescription.setText("");
        ItemPurchasePrice.setText("");
        ItemSellingPrice.setText("");
        ItemManufactureDate.setDate(null);
        ItemExpirationDate.setDate(null);
        ItemWeight.setText("");
        ItemQuantity.setText("");
    }//GEN-LAST:event_jButtonClearMouseClicked

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonUpdateFromEmployeeTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateFromEmployeeTableActionPerformed
        int row = USDetails.getSelectedRow();
        String cell = USDetails.getModel().getValueAt(row,0).toString();
        String brand = USDetails.getModel().getValueAt(row,1).toString();
        String description = USDetails.getModel().getValueAt(row,2).toString();
        String pp = USDetails.getModel().getValueAt(row,3).toString();
        String sp = USDetails.getModel().getValueAt(row,4).toString();
        String md = USDetails.getModel().getValueAt(row,5).toString();
        String ed = USDetails.getModel().getValueAt(row,6).toString();
        String weight = USDetails.getModel().getValueAt(row,7).toString();
        String quantity = USDetails.getModel().getValueAt(row,8).toString();
        String status = USDetails.getModel().getValueAt(row,9).toString();
        System.out.println("id = "+cell);
        System.out.println("brand = "+brand);
        System.out.println("description = "+description);
        System.out.println("purchase price = "+pp);
        System.out.println("selling price = "+sp);
        System.out.println("manufacture date = "+md);
        System.out.println("expiration date = "+ed);
        System.out.println("weight = "+weight);
        System.out.println("quantity = "+quantity);
        System.out.println("status = "+status);

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            //Statement stLogin = connectionLogin.createStatement();
            //String sqlLogin = "select * from Owner where OwnerEmail = ? and OwnerPassword = ?";
            //PreparedStatement pstLogin = connectionLogin.prepareStatement(sqlLogin);
            Date manufacturedatecheck = ItemManufactureDate.getDate();
            Date expirationdatecheck = ItemExpirationDate.getDate();
            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            
            float purchaseprice = Float.parseFloat(ItemPurchasePrice.getText());
            float sellingprice = Float.parseFloat(ItemSellingPrice.getText());
            
            if(manufacturedatecheck.compareTo(expirationdatecheck)>0)
            {
                JOptionPane.showMessageDialog(this,"Manufacture date can't be after the Expiration date of an item. Update Correctly!");
            }
            
            /*if(expirationdatecheck.compareTo(presentdatecheck)<0)
            {
                JOptionPane.showMessageDialog(this,"Expired product can't be added. Check expiration date!");
            }*/
            
            if(purchaseprice>sellingprice)
            {
                JOptionPane.showMessageDialog(this,"Purchase Price can't be higher than Selling Price");
            }
            
            /*if(Integer.parseInt(ItemQuantity.getText())<=0)
            {
                JOptionPane.showMessageDialog(this,"Item Quantity must be more than zero");
            }*/
            
            if(manufacturedatecheck.compareTo(expirationdatecheck)<0 && purchaseprice<sellingprice)
            {
                String sqlInsert = "update Item set ItemBrand=?,ItemDescription=?,ItemPurchasePrice=?,ItemSellingPrice=?,ItemManufactureDate=?,ItemExpirationDate=?,ItemWeight=?,ItemQuantity=? where ItemId=?";
                PreparedStatement pst = con.prepareStatement(sqlInsert);

                if(ItemBrand.getText().length()>0)
                {
                    pst.setString(1, ItemBrand.getText());
                }
                else
                {
                    pst.setString(1, brand);
                }

                if(ItemDescription.getText().length()>0)
                {
                    pst.setString(2, ItemDescription.getText());
                }
                else
                {
                    pst.setString(2, description);
                }

                if(ItemPurchasePrice.getText().length()>0)
                {
                    pst.setString(3, ItemPurchasePrice.getText());
                }
                else
                {
                    pst.setString(3, pp);
                }

                if(ItemSellingPrice.getText().length()>0)
                {
                    pst.setString(4, ItemSellingPrice.getText());
                }
                else
                {
                    pst.setString(4, sp);
                }

                if(ItemManufactureDate.getDate() != null)
                {
                    Date manufacturedatecheck2 = ItemManufactureDate.getDate();
                    SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                    String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                    /**/pst.setString(5, manufacturedate);
                }
                else
                {
                    pst.setString(5, md);
                }

                if(ItemExpirationDate.getDate() != null)
                {
                    Date expirationdatecheck2 = ItemExpirationDate.getDate();
                    SimpleDateFormat edf = new SimpleDateFormat("yyyy-MM-dd");
                    String expirationdate = edf.format(ItemExpirationDate.getDate());
                    /**/pst.setString(6, expirationdate);
                }
                else
                {
                    pst.setString(6, ed);
                }

                if(ItemWeight.getText().length()>0)
                {
                    pst.setString(7, ItemWeight.getText());
                }
                else
                {
                    pst.setString(7, weight);
                }

                if(ItemQuantity.getText().length()>0)
                {
                    pst.setString(8, ItemQuantity.getText());
                }
                else
                {
                    pst.setString(8, quantity);
                }

                pst.setString(9, cell);

                pst.executeUpdate();

                JOptionPane.showMessageDialog(this,"Successfully updated");

                /*if(UEIID.getText().length()==0)
                {
                    JOptionPane.showMessageDialog(this,"Nothing updated");
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Successfully updated");
                }
                //JOptionPane.showMessageDialog(this,"Successfully updated");

                //connectionLogin.close();*/
            }

         }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }//GEN-LAST:event_jButtonUpdateFromEmployeeTableActionPerformed

    private void jButtonFetchinUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFetchinUIActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
                               "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
                               "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            USDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            USDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from Item";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("ItemQuantity");
                String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                DefaultTableModel items = (DefaultTableModel)USDetails.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonFetchinUIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateStock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ItemBrand;
    private javax.swing.JTextField ItemDescription;
    private com.toedter.calendar.JDateChooser ItemExpirationDate;
    private com.toedter.calendar.JDateChooser ItemManufactureDate;
    private javax.swing.JTextField ItemPurchasePrice;
    private javax.swing.JTextField ItemQuantity;
    private javax.swing.JTextField ItemSellingPrice;
    private javax.swing.JTextField ItemWeight;
    private javax.swing.JTable USDetails;
    private javax.swing.JButton jButtonBFUIS;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonFetchinUI;
    private javax.swing.JButton jButtonSearchUS;
    private javax.swing.JButton jButtonUpdateFromEmployeeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelUISClose;
    private javax.swing.JLabel jLabelUISMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
