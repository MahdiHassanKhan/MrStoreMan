/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrstoreman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static mrstoreman.CustomerInterface.customerid2;
import static mrstoreman.CustomerInterface.customername2;

/**
 *
 * @author Mahdi
 */
public class BuyItems extends javax.swing.JFrame {

    /**
     * Creates new form BuyItems
     */
    static String customerid3;
    static String customername3;
    
    static String itemid3;
    static String itembrand3;
    static String itemdescription3;
    static String itemsellingprice3;
    static String itemmd3;
    static String itemed3;
    static String itemvl3;
    static String itemweight3;
    static String itemstatus3;
    static String itemquantity_instock3;
    
    public BuyItems() {
        initComponents();
         this.setLocationRelativeTo(null);
    }

    public BuyItems(String customerid2, String customername2) {
        initComponents();
         this.setLocationRelativeTo(null);
         
         jLabelCustomerID2.setText(customerid2);
         jLabelCustomerName2.setText(customername2);
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ItemBrand = new javax.swing.JTextField();
        ItemDescription = new javax.swing.JTextField();
        ItemPRFrom = new javax.swing.JTextField();
        ViewEditCartBI = new javax.swing.JButton();
        jButtonBFBI = new javax.swing.JButton();
        jLabelBIMin = new javax.swing.JLabel();
        jLabelBIClose = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ItemPRTo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        BIDetails = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jButtonFetchinBI = new javax.swing.JButton();
        jButtonSearchBI = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ItemID = new javax.swing.JTextField();
        jButtonCheckItemBI = new javax.swing.JButton();
        jLabelCustomerID2 = new javax.swing.JLabel();
        jLabelCustomerName2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(17, 32, 65));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Brand:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Type/Description:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Price Range");

        ItemBrand.setBackground(new java.awt.Color(234, 67, 73));
        ItemBrand.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemBrand.setForeground(new java.awt.Color(240, 240, 240));

        ItemDescription.setBackground(new java.awt.Color(234, 67, 73));
        ItemDescription.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemDescription.setForeground(new java.awt.Color(240, 240, 240));
        ItemDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemDescriptionActionPerformed(evt);
            }
        });

        ItemPRFrom.setBackground(new java.awt.Color(234, 67, 73));
        ItemPRFrom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemPRFrom.setForeground(new java.awt.Color(240, 240, 240));
        ItemPRFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPRFromActionPerformed(evt);
            }
        });

        ViewEditCartBI.setBackground(new java.awt.Color(243, 67, 73));
        ViewEditCartBI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ViewEditCartBI.setForeground(new java.awt.Color(240, 240, 240));
        ViewEditCartBI.setText("View & Edit Cart");
        ViewEditCartBI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewEditCartBIMouseClicked(evt);
            }
        });
        ViewEditCartBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewEditCartBIActionPerformed(evt);
            }
        });

        jButtonBFBI.setBackground(new java.awt.Color(243, 67, 73));
        jButtonBFBI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBFBI.setForeground(new java.awt.Color(240, 240, 240));
        jButtonBFBI.setText("<-");
        jButtonBFBI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBFBI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBFBIMouseClicked(evt);
            }
        });
        jButtonBFBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBFBIActionPerformed(evt);
            }
        });

        jLabelBIMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelBIMin.setForeground(new java.awt.Color(240, 240, 240));
        jLabelBIMin.setText("-");
        jLabelBIMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelBIMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBIMinMouseClicked(evt);
            }
        });

        jLabelBIClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelBIClose.setForeground(new java.awt.Color(240, 240, 240));
        jLabelBIClose.setText("X");
        jLabelBIClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelBIClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBICloseMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("From:");

        ItemPRTo.setBackground(new java.awt.Color(234, 67, 73));
        ItemPRTo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemPRTo.setForeground(new java.awt.Color(240, 240, 240));
        ItemPRTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPRToActionPerformed(evt);
            }
        });

        /////////////////
        BIDetails = new JTable()
        {
            public boolean isCellEditable(int row, int column)
            {
                for(int i=0 ; i<BIDetails.getRowCount() ;i++)
                {
                    if(row == i)
                    {
                        return false;
                    }
                }
                return true;
            }
        };
        /////////////////
        BIDetails.setBackground(new java.awt.Color(243, 67, 73));
        BIDetails.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BIDetails.setForeground(new java.awt.Color(240, 240, 240));
        BIDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Type/Description", "Purchase Price", "Selling Price", "Manufacture Date", "Expiration Date", "Validation Left", "Weight(gm)", "Quantity", "Status"
            }
        ));
        BIDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BIDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BIDetails);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Buy Items");

        jButtonFetchinBI.setBackground(new java.awt.Color(243, 67, 73));
        jButtonFetchinBI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonFetchinBI.setForeground(new java.awt.Color(240, 240, 240));
        jButtonFetchinBI.setText("Fetch");
        jButtonFetchinBI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonFetchinBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFetchinBIActionPerformed(evt);
            }
        });

        jButtonSearchBI.setBackground(new java.awt.Color(243, 67, 73));
        jButtonSearchBI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonSearchBI.setForeground(new java.awt.Color(240, 240, 240));
        jButtonSearchBI.setText("Search");
        jButtonSearchBI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSearchBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchBIActionPerformed(evt);
            }
        });

        jButtonClear.setBackground(new java.awt.Color(234, 67, 73));
        jButtonClear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonClear.setForeground(new java.awt.Color(240, 240, 240));
        jButtonClear.setText("Clear");
        jButtonClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonClearMouseClicked(evt);
            }
        });
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("To:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("ID:");

        ItemID.setBackground(new java.awt.Color(234, 67, 73));
        ItemID.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ItemID.setForeground(new java.awt.Color(240, 240, 240));

        jButtonCheckItemBI.setBackground(new java.awt.Color(243, 67, 73));
        jButtonCheckItemBI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCheckItemBI.setForeground(new java.awt.Color(240, 240, 240));
        jButtonCheckItemBI.setText("Check Item");
        jButtonCheckItemBI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonCheckItemBI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCheckItemBIMouseClicked(evt);
            }
        });
        jButtonCheckItemBI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckItemBIActionPerformed(evt);
            }
        });

        jLabelCustomerID2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCustomerID2.setForeground(new java.awt.Color(240, 240, 240));
        jLabelCustomerID2.setText("ID");

        jLabelCustomerName2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCustomerName2.setForeground(new java.awt.Color(240, 240, 240));
        jLabelCustomerName2.setText("User");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonSearchBI, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ItemBrand)
                                    .addComponent(ItemDescription)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(96, 96, 96)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                        .addComponent(ItemPRTo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBFBI)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addComponent(ItemPRFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCustomerName2)
                            .addComponent(jLabelCustomerID2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(463, 463, 463)
                                .addComponent(jLabelBIMin)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelBIClose))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ViewEditCartBI)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFetchinBI, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCheckItemBI, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBIClose)
                    .addComponent(jLabelBIMin)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFetchinBI, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewEditCartBI, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCheckItemBI, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButtonBFBI)
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ItemBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ItemDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(ItemPRTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ItemPRFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonSearchBI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCustomerID2)
                .addGap(18, 18, 18)
                .addComponent(jLabelCustomerName2)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ItemDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemDescriptionActionPerformed

    private void ItemPRFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPRFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemPRFromActionPerformed

    private void ViewEditCartBIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewEditCartBIMouseClicked
        /*ViewEditCart3 vec3 = new ViewEditCart3();
        vec3.setVisible(true);
        vec3.pack();
        vec3.setLocationRelativeTo(null);
        vec3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();*/
        customerid3 = jLabelCustomerID2.getText();
        customername3 = jLabelCustomerName2.getText();
        new ViewEditCart3(customerid3,customername3).setVisible(true); /*******************/
                        this.dispose();
    }//GEN-LAST:event_ViewEditCartBIMouseClicked

    private void ViewEditCartBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewEditCartBIActionPerformed

    }//GEN-LAST:event_ViewEditCartBIActionPerformed

    private void jButtonBFBIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBFBIMouseClicked
        /*CustomerInterface ci33 = new CustomerInterface();
        ci33.setVisible(true);
        ci33.pack();
        ci33.setLocationRelativeTo(null);
        ci33.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();*/
        new CustomerInterface(customerid2,customername2).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonBFBIMouseClicked

    private void jButtonBFBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBFBIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBFBIActionPerformed

    private void jLabelBIMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBIMinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelBIMinMouseClicked

    private void jLabelBICloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBICloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelBICloseMouseClicked

    private void ItemPRToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPRToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemPRToActionPerformed

    private void BIDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BIDetailsMouseClicked
        int row = BIDetails.getSelectedRow();
        String selection = BIDetails.getModel().getValueAt(row,0).toString();
        //String sql = "select * from Employee where EmployeeId = " + selection;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemID.setText(rs3.getString("ItemId"));
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));

                itemid3 = rs3.getString("ItemId");
                itembrand3 = rs3.getString("ItemBrand");
                itemdescription3 = rs3.getString("ItemDescription");
                itemsellingprice3 = rs3.getString("ItemSellingPrice");
                itemmd3 = rs3.getString("ItemManufactureDate");
                itemed3 = rs3.getString("ItemExpirationDate");
                itemvl3 = rs3.getString("ItemValidationLeft");
                itemweight3 = rs3.getString("ItemWeight");
                itemstatus3 = rs3.getString("ItemStatus");
                itemquantity_instock3 = rs3.getString("ItemQuantity");
                //ItemPRTo.setText(rs3.getString("ItemPurchasePrice"));
                //ItemPRFrom.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //pst.setString(5, manufacturedate);
                //ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                //ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                //ItemWeight.setText(rs3.getString("ItemWeight"));
                //ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,"First select an Item");
        }

        if(evt.getClickCount()==2)
        {
            /*AddToCart atc = new AddToCart();
            atc.setVisible(true);
            atc.pack();
            atc.setLocationRelativeTo(null);
            atc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();*/
            new AddToCart3(itemid3,itembrand3,itemdescription3,itemsellingprice3,itemmd3,itemed3,itemvl3,itemweight3,itemstatus3,itemquantity_instock3).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_BIDetailsMouseClicked

    private void jButtonFetchinBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFetchinBIActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
            "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
            "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
            "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            BIDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection2 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            BIDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
            Statement st2 = connection2.createStatement();
            String sql2 = "select * from Item WHERE ItemStatus = 'Available' ";
            ResultSet rs2 = st2.executeQuery(sql2);

            Date presentdate = new Date();
            java.sql.Date presentdatecheck = new java.sql.Date(presentdate.getTime());
            SimpleDateFormat pd = new SimpleDateFormat("yyyy-MM-dd");
            String prd = pd.format(presentdatecheck);

            while(rs2.next()){
                String ItemId = String.valueOf(rs2.getInt("ItemId"));
                String ItemBrand = rs2.getString("ItemBrand");
                String ItemDescription = rs2.getString("ItemDescription");
                String ItemPurchasePrice = rs2.getString("ItemPurchasePrice");
                String ItemSellingPrice = rs2.getString("ItemSellingPrice");
                String ItemManufactureDate = rs2.getString("ItemManufactureDate");
                String ItemExpirationDate = rs2.getString("ItemExpirationDate");
                String ItemValidationLeft = rs2.getString("ItemValidationLeft");
                String ItemWeight = rs2.getString("ItemWeight");
                String ItemQuantity = rs2.getString("ItemQuantity");
                String ItemStatus = rs2.getString("ItemStatus");

                String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                DefaultTableModel items = (DefaultTableModel)BIDetails.getModel();
                items.addRow(ItemData);
            }

            connection2.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonFetchinBIActionPerformed

    private void jButtonSearchBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchBIActionPerformed
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            /*Date md = new Date();
            java.sql.Date mdate = new java.sql.Date(md.getTime());
            System.out.println(md);
            System.out.println(mdate);

            Date ed = new Date();
            java.sql.Date edate = new java.sql.Date(ed.getTime());
            System.out.println(ed);
            System.out.println(edate);

            String seconddate = "2021-03-20";
            Date date2=new SimpleDateFormat("yyyy-MM-dd").parse(seconddate);
            java.sql.Date newdate = new java.sql.Date(date2.getTime());
            System.out.println(seconddate+"\t"+date2);
            System.out.println(seconddate+"\t"+newdate);

            System.out.println("manufacture date = "+mdate);
            System.out.println("expiration date = "+edate);

            long diff = md.getTime()-ed.getTime();
            long sec = diff/1000;
            long min = sec/60;
            long hours = min/60;
            long days = hours/24;

            System.out.println("diff = "+diff);
            System.out.println("sec = "+sec);
            System.out.println("min = "+min);
            System.out.println("hours = "+hours);
            System.out.println("days = "+days);

            if(mdate.compareTo(edate)<=0)
            {
                System.out.println("Not expired");
            }

            if(mdate.compareTo(edate)>0)
            {
                System.out.println("expired");
            }*/

            Date date = new Date();
            java.sql.Date presentdate = new java.sql.Date(date.getTime());
            System.out.println(date);
            System.out.println(presentdate);

            String sqlInsert = "UPDATE Item SET Item.[ItemStatus] = 'Expired' WHERE Item.[ItemExpirationDate] <= ?;\n" +
            "Update Item SET Item.[ItemStatus] = 'Out of stock' WHERE Item.[ItemQuantity] = 0;\n" +
            "Update Item SET Item.[ItemStatus] = 'Available' WHERE Item.[ItemQuantity] > 0 and Item.[ItemExpirationDate] > ?;" +
            "update Item set ItemValidationLeft = DATEDIFF(day, GETDATE(), ItemExpirationDate)";

            PreparedStatement pst = con.prepareStatement(sqlInsert);
            SimpleDateFormat prd = new SimpleDateFormat("yyyy-MM-dd");
            String pd = prd.format(date);
            System.out.println(pd);
            pst.setString(1, pd);
            pst.setString(2, pd);

            pst.executeUpdate();
            //JOptionPane.showMessageDialog(null,"Item Status updated");
            BIDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
        }

        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            //JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,e);
        }

        try {
            BIDetails.setModel(new DefaultTableModel(null, new String[]{"ID","Brand","Type/Description","Purchase Price","Selling Price","Manufacture Date","Expiration Date","Validation Left","Weight(gm)","Quantity","Status"}));
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");

            int checkid=0,checkbrand=0,checkdescription=0,checkfrom=0,checkto=0;
            String sql1 = "SELECT * FROM Item WHERE ";

            if(ItemID.getText().length()>0)
            {
                sql1 +="ItemId LIKE '%"+ItemID.getText()+"%'";
                checkid=1;
            }

            if(ItemBrand.getText().length()>0)
            {
                if(checkid==0)
                {
                    sql1 +="ItemBrand LIKE '%"+ItemBrand.getText()+"%'";
                }
                else if(checkid==1)
                {
                    sql1 += "AND ItemBrand LIKE '%"+ItemBrand.getText()+"%'";
                }
                checkbrand=1;
            }

            if(ItemDescription.getText().length()>0)
            {
                if(checkid==0&&checkbrand==0)
                {
                    sql1 += "ItemDescription LIKE '%"+ItemDescription.getText()+"%'";
                }
                else if(checkid==1||checkbrand==1)
                {
                    sql1 += "AND ItemDescription LIKE '%"+ItemDescription.getText()+"%'";
                }
                checkdescription=1;
            }

            if(ItemPRFrom.getText().length()>0)
            {
                if(checkid==0&&checkbrand==0&&checkdescription==0)
                {
                    sql1 += "ItemSellingPrice >= "+ItemPRFrom.getText()+"";
                }
                else if(checkid==1||checkbrand==1||checkdescription==1)
                {
                    sql1 += "AND ItemSellingPrice >= "+ItemPRFrom.getText()+"";
                }
                checkfrom=1;
            }

            if(ItemPRTo.getText().length()>0)
            {
                if(checkid==0&&checkbrand==0&&checkdescription==0&&checkfrom==0)
                {
                    sql1 += "ItemSellingPrice <= "+ItemPRTo.getText()+"";
                }
                if(checkid==1||checkbrand==1||checkdescription==1||checkfrom==1)
                {
                    sql1 += "AND ItemSellingPrice <= "+ItemPRTo.getText()+"";
                }
                checkto=1;
            }

            sql1 += "AND ItemStatus = 'Available' ";

            System.out.println("sql query is "+sql1);

            PreparedStatement pst = connection.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();

            while(rs1.next()){
                String ItemId = String.valueOf(rs1.getInt("ItemId"));
                String ItemBrand = rs1.getString("ItemBrand");
                String ItemDescription = rs1.getString("ItemDescription");
                String ItemPurchasePrice = rs1.getString("ItemPurchasePrice");
                String ItemSellingPrice = rs1.getString("ItemSellingPrice");
                String ItemManufactureDate = rs1.getString("ItemManufactureDate");
                String ItemExpirationDate = rs1.getString("ItemExpirationDate");
                String ItemValidationLeft = rs1.getString("ItemValidationLeft");
                String ItemWeight = rs1.getString("ItemWeight");
                String ItemQuantity = rs1.getString("ItemQuantity");
                String ItemStatus = rs1.getString("ItemStatus");

                String ItemData[] = {ItemId,ItemBrand,ItemDescription,ItemPurchasePrice,ItemSellingPrice,ItemManufactureDate,ItemExpirationDate,ItemValidationLeft,ItemWeight,ItemQuantity,ItemStatus};
                DefaultTableModel items = (DefaultTableModel)BIDetails.getModel();
                items.addRow(ItemData);
            }

            //connection.close();

        }
        catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_jButtonSearchBIActionPerformed

    private void jButtonClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonClearMouseClicked
        ItemID.setText("");
        ItemBrand.setText("");
        ItemDescription.setText("");
        ItemPRFrom.setText("");
        ItemPRTo.setText("");
    }//GEN-LAST:event_jButtonClearMouseClicked

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonCheckItemBIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCheckItemBIMouseClicked
        /*  AddToCart atc = new AddToCart();
        atc.setVisible(true);
        atc.pack();
        atc.setLocationRelativeTo(null);
        atc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();*/
    }//GEN-LAST:event_jButtonCheckItemBIMouseClicked

    private void jButtonCheckItemBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckItemBIActionPerformed
        try {
            int row = BIDetails.getSelectedRow();
            String selection = BIDetails.getModel().getValueAt(row,0).toString();
            //String sql = "select * from Employee where EmployeeId = " + selection;
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=MrStoreMan;selectMethod=cursor", "sa", "123456");
            Statement st3 = connection3.createStatement();
            String sql3 = "select * from Item where ItemId = " + selection;
            ResultSet rs3 = st3.executeQuery(sql3);
            if(rs3.next()){
                ItemID.setText(rs3.getString("ItemId"));
                ItemBrand.setText(rs3.getString("ItemBrand"));
                ItemDescription.setText(rs3.getString("ItemDescription"));

                itemid3 = rs3.getString("ItemId");
                itembrand3 = rs3.getString("ItemBrand");
                itemdescription3 = rs3.getString("ItemDescription");
                itemsellingprice3 = rs3.getString("ItemSellingPrice");
                itemmd3 = rs3.getString("ItemManufactureDate");
                itemed3 = rs3.getString("ItemExpirationDate");
                itemvl3 = rs3.getString("ItemValidationLeft");
                itemweight3 = rs3.getString("ItemWeight");
                itemstatus3 = rs3.getString("ItemStatus");
                itemquantity_instock3 = rs3.getString("ItemQuantity");

                /*new OwnerInterface(username).setVisible(true); /*******************/
                //oiStart.setVisible(true);
                //oiStart.pack();
                //oiStart.setLocationRelativeTo(null);
                //oiStart.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                //this.dispose();

                new AddToCart3(itemid3,itembrand3,itemdescription3,itemsellingprice3,itemmd3,itemed3,itemvl3,itemweight3,itemstatus3,itemquantity_instock3).setVisible(true);
                this.dispose();
                //ItemPRTo.setText(rs3.getString("ItemPurchasePrice"));
                //ItemPRFrom.setText(rs3.getString("ItemSellingPrice"));

                //Date manufacturedatecheck = ItemManufactureDate.getDate();
                //SimpleDateFormat mdf = new SimpleDateFormat("yyyy-MM-dd");
                //String manufacturedate = mdf.format(ItemManufactureDate.getDate());
                //pst.setString(5, manufacturedate);
                //ItemManufactureDate.setDate(rs3.getDate("ItemManufactureDate"));
                //ItemExpirationDate.setDate(rs3.getDate("ItemExpirationDate"));

                //ItemWeight.setText(rs3.getString("ItemWeight"));
                //ItemQuantity.setText(rs3.getString("ItemQuantity"));
            }

        }
        catch (Exception e) {
            //e.printStackTrace();
            //System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,"You didn't choose any item");
        }
    }//GEN-LAST:event_jButtonCheckItemBIActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuyItems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BIDetails;
    private javax.swing.JTextField ItemBrand;
    private javax.swing.JTextField ItemDescription;
    private javax.swing.JTextField ItemID;
    private javax.swing.JTextField ItemPRFrom;
    private javax.swing.JTextField ItemPRTo;
    private javax.swing.JButton ViewEditCartBI;
    private javax.swing.JButton jButtonBFBI;
    private javax.swing.JButton jButtonCheckItemBI;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonFetchinBI;
    private javax.swing.JButton jButtonSearchBI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelBIClose;
    private javax.swing.JLabel jLabelBIMin;
    private javax.swing.JLabel jLabelCustomerID2;
    private javax.swing.JLabel jLabelCustomerName2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
